/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'net.nemerosa.versioning' version '2.12.1'
}
apply plugin: 'application'
apply plugin: 'kotlin'

group = 'me.alex.obama'
ext.projectVer = '1.0.0'
version = projectVer
description = 'Obama'
sourceCompatibility = '9'

repositories {
    mavenLocal()
    maven {
        url = uri('https://jcenter.bintray.com')
    }

    maven {
        url = uri('https://jitpack.io')
    }

    maven {
        url = uri('http://repo.maven.apache.org/maven2')
    }
}

versioning {
    /**
     * Defines the SCM to use in order to collect information.
     *
     * At the moment, only Git (git) and Subversion (svn) are supported.
     */
    scm = 'git'

    /**
     * Computation of the full version
     */
    full = {
        scmInfo ->

            GString suffix = "${scmInfo.branch}"

            GString num = scmInfo.tag != null ? "${scmInfo.tag}" : "${scmInfo.abbreviated}.b-${suffix}"

            return "${num}"

    }

    releaseMode = 'snapshot'
    snapshot = '-beta'
//        displayMode = 'snapshot'

    /**
     * Dirty mode.
     *
     * Closure that takes a version (display or full) and processes it to produce a <i>dirty</i>
     * indicator. By default, it appends the dirtySuffix value to the version.
     */
    dirty = { version -> "${version}" }

    /**
     * Default dirty suffix
     */
    dirtySuffix = ''

    /**
     * If set to true, the build will fail if working copy is dirty and if the branch type is
     * part of the releases list ("release" only by default).
     */
    dirtyFailOnReleases = false

    /**
     * If set to true, no warning will be printed in case the workspace is dirty. Default is
     * to print a warning.
     */
    noWarningOnDirty = false

    /**
     * Set of eligible branch types for computing a display version from the branch base name
     */
    releases = ['release', 'stable']
    /**
     * Pattern used to match when looking for the last tag. By default, checks for any
     * tag having a last part being numeric. At least one numeric grouping
     * expression is required. The first one will be used to reverse order
     * the tags in Git.
     */
    lastTagPattern = /(\d+)$/
}

afterEvaluate {
    version = !versioning.info.dirty ? versioning.info.full : "${project.version}-b${versioning.info.branch}-dirty"
    println "Current Version is ${version}"

    processResources {
//        from 'resources'

        inputs.property "git_version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include 'build.json'


            expand 'git_version': project.version
        }

    }
}


dependencies {
    implementation 'org.apache.maven.plugins:maven-compiler-plugin:3.8.1'
    implementation 'net.dv8tion:JDA:4.2.0_180'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'com.github.Fernthedev:FernUtils:1.4.0'
    implementation 'com.squareup.okio:okio:2.7.0'
    implementation 'com.github.Fernthedev:fern-configmanager:1.3.0'
    implementation 'com.squareup.okhttp3:okhttp:4.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.11'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.3.72'
}



publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

jar.getArchiveClassifier().set('old')
shadowJar {
    minimize()
    getArchiveClassifier().set('')
    getArchiveVersion().set(project.ext.projectVer)
}

jar.dependsOn(shadowJar)


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/java'
}

application {
    mainClassName = 'me.alex.obama.Main'
}
